{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;\red155\green162\blue177;
\red255\green255\blue255;\red22\green21\blue22;\red246\green246\blue246;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c99985;\cssrgb\c0\c0\c0;\cssrgb\c67059\c69804\c74902;
\cssrgb\c100000\c100000\c100000;\cssrgb\c11373\c10980\c11373;\cssrgb\c97255\c97255\c97255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs30 \cf0 1. Fork yolov5 repo to your own repo\
\
2. Clone the yolov5 in your own repo to your project directory\
\
3. run command below in your terminal if you are using poetry for package management
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\i \cf2 \cb3 \expnd0\expndtw0\kerning0
grep -vE '^\\s*#' requirements.txt | xargs -n 1 poetry add -D 
\f2\i0 \cf4 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs30 \cf0 \kerning1\expnd0\expndtw0 \
Or use the requirements.txt\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \cb3 pip install -r requirements.txt\cf0 \cb1 \
\
(For creating requirements.txt from poetry)\
\cf5 \cb3 poetry export --without-hashes --format=requirements.txt > requirements.txt --with dev\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \
4. (Optional if you are not using poetry) poetry shell to create your virtual env\
\
5. git (add commit push)\
\
6. Insert your dataset with structure like below:\
dataset\
     |\'97image\
	     |\'97image_1.jpg\
     |\'97aggregated_annotations.csv\
\
7. Run data_prep.py\
\
8. Run command for training (remember to change the directory name in your yaml file and also change the argument here if needed)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\i\fs24 \cf5 \cb3 \expnd0\expndtw0\kerning0
python3 yolov5/train.py --img 640 --batch 16 --epochs 100 --data liquid.yaml --cfg yolov5/models/yolov5s.yaml\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i0\fs30 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
9. Create your own config.ini file including your API key, Tello IP, and wifi IP\
\
10. Connect to your drone\
\
11. Run the drone_detect.py file to see result \
(mock execution and control with kb for now, you can change it to speech recognition or exact execution if you want)\
How to change? (Change it inside the drone_detect.py)\
	1. Change (mock = True) at line 549 if you want to do mock drone execution\
	2. Change (control_with_kb = True) at line 550 if you want to control the drone with keyboard otherwise it will be controlled with speech recognition\
\
Keyboard shortcut:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf6 \cb7 		\expnd0\expndtw0\kerning0
w -> move forward,\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
s -> move backward,\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
d -> move right,\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
a -> move left,\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
e -> move up,\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
q -> move down\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
white space -> takeoff\cb1 \
\ls1\ilvl0\cb7 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
esc -> land\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 12. If you want to use keyboard to control drone on Mac, you need to go to system preference > privacy tab > accessibility > add terminal and IDE\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf6 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\
Note:\
1. When you are trying to create multi-threads, remember the rendering camera code can only work on main thread due to MacOS platform limitation\
\
2. Keyboard listener cannot be working with cv2,imshow concurrently since they both require keyboard access which will block the GUI control for cv2 (change to QImage)\
\
\
}